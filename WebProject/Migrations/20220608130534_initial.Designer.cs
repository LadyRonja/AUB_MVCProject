// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebProject.Data;

namespace WebProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220608130534_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "05fe6198-1ced-443a-ad2c-5d9477df7449",
                            ConcurrencyStamp = "04ac35fc-94ad-4960-8e7d-b422610f7567",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c6810e1a-b13a-433a-bf92-b04ee782ece9",
                            ConcurrencyStamp = "b7af16e5-0678-4ed2-ab80-69315f98f99a",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "62650392-e3a3-4208-9df5-10ff008cf831",
                            RoleId = "05fe6198-1ced-443a-ad2c-5d9477df7449"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebProject.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "62650392-e3a3-4208-9df5-10ff008cf831",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b4e6cb0c-ed43-4aff-a71a-5772968767d7",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Adminsson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENtu7BTQ/SacZMMKEwhax71NoYSD7HCxsY6dq7FBec+5lsBV5zxZ2IEt0+pjf+AyHw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b20eacd-9bfc-48d3-850a-41529925cac2",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("WebProject.Models.City", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            ID = new Guid("adc5c322-8f30-41f0-a472-a2fc6a7b56cb"),
                            CountryID = new Guid("45452a84-d7cc-48de-8dfb-2818b9471bce"),
                            Name = "Los Angeles"
                        },
                        new
                        {
                            ID = new Guid("8f9cee4e-79f5-46aa-ad01-8d922479f497"),
                            CountryID = new Guid("45452a84-d7cc-48de-8dfb-2818b9471bce"),
                            Name = "Chicago"
                        },
                        new
                        {
                            ID = new Guid("529b7340-0ded-4d89-ace3-17bf1a275181"),
                            CountryID = new Guid("45452a84-d7cc-48de-8dfb-2818b9471bce"),
                            Name = "Springfield"
                        },
                        new
                        {
                            ID = new Guid("3f8b480c-3913-4508-96ad-4967133cb3b7"),
                            CountryID = new Guid("93044ce3-77d4-453f-95ad-648ba9a4a44a"),
                            Name = "Dreamland"
                        },
                        new
                        {
                            ID = new Guid("7ad71a68-8329-4e80-aae0-2724aa09df11"),
                            CountryID = new Guid("022c8a26-b1e3-4d0b-af94-8569d47e61fe"),
                            Name = "Borås"
                        },
                        new
                        {
                            ID = new Guid("00a0c2df-0487-46a5-ac57-37b2807bf600"),
                            CountryID = new Guid("45452a84-d7cc-48de-8dfb-2818b9471bce"),
                            Name = "Albuquerque"
                        });
                });

            modelBuilder.Entity("WebProject.Models.Country", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            ID = new Guid("022c8a26-b1e3-4d0b-af94-8569d47e61fe"),
                            Name = "Sweden"
                        },
                        new
                        {
                            ID = new Guid("93044ce3-77d4-453f-95ad-648ba9a4a44a"),
                            Name = "Germany"
                        },
                        new
                        {
                            ID = new Guid("45452a84-d7cc-48de-8dfb-2818b9471bce"),
                            Name = "USA"
                        });
                });

            modelBuilder.Entity("WebProject.Models.Language", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            ID = new Guid("4468e7d0-30b0-4eb8-acee-f85f2070e892"),
                            Name = "English"
                        },
                        new
                        {
                            ID = new Guid("8c659377-b25f-41d1-b355-f1f2dc08bd59"),
                            Name = "Swedish"
                        },
                        new
                        {
                            ID = new Guid("ce71eef1-0fe8-495d-a8ff-e6e10713e6de"),
                            Name = "German"
                        },
                        new
                        {
                            ID = new Guid("5ee2ca5a-f2f5-40e5-9544-7bcca5519709"),
                            Name = "C#"
                        });
                });

            modelBuilder.Entity("WebProject.Models.LanguagePerson", b =>
                {
                    b.Property<Guid>("LanguageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LanguageID", "PersonID");

                    b.HasIndex("PersonID");

                    b.ToTable("LanguageSpeakers");

                    b.HasData(
                        new
                        {
                            LanguageID = new Guid("4468e7d0-30b0-4eb8-acee-f85f2070e892"),
                            PersonID = new Guid("60462428-59e4-43e3-8f97-b4debedcc340")
                        },
                        new
                        {
                            LanguageID = new Guid("4468e7d0-30b0-4eb8-acee-f85f2070e892"),
                            PersonID = new Guid("b89407ba-c4fd-4354-948b-1838e1b3be77")
                        },
                        new
                        {
                            LanguageID = new Guid("4468e7d0-30b0-4eb8-acee-f85f2070e892"),
                            PersonID = new Guid("d967ea5a-0ab0-4e21-b6a4-9be6f5e921f5")
                        },
                        new
                        {
                            LanguageID = new Guid("ce71eef1-0fe8-495d-a8ff-e6e10713e6de"),
                            PersonID = new Guid("8678839a-dbfe-49ba-bfa3-93e71b5d2945")
                        },
                        new
                        {
                            LanguageID = new Guid("5ee2ca5a-f2f5-40e5-9544-7bcca5519709"),
                            PersonID = new Guid("8678839a-dbfe-49ba-bfa3-93e71b5d2945")
                        },
                        new
                        {
                            LanguageID = new Guid("4468e7d0-30b0-4eb8-acee-f85f2070e892"),
                            PersonID = new Guid("f918763a-2e4a-45a8-8693-c16a6f343d8d")
                        },
                        new
                        {
                            LanguageID = new Guid("ce71eef1-0fe8-495d-a8ff-e6e10713e6de"),
                            PersonID = new Guid("f918763a-2e4a-45a8-8693-c16a6f343d8d")
                        },
                        new
                        {
                            LanguageID = new Guid("8c659377-b25f-41d1-b355-f1f2dc08bd59"),
                            PersonID = new Guid("f918763a-2e4a-45a8-8693-c16a6f343d8d")
                        },
                        new
                        {
                            LanguageID = new Guid("4468e7d0-30b0-4eb8-acee-f85f2070e892"),
                            PersonID = new Guid("6785893f-9f6a-4560-90e9-5928c0543821")
                        });
                });

            modelBuilder.Entity("WebProject.Models.Person", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            ID = new Guid("60462428-59e4-43e3-8f97-b4debedcc340"),
                            CityID = new Guid("adc5c322-8f30-41f0-a472-a2fc6a7b56cb"),
                            Name = "Jane Doe",
                            PhoneNumber = "555-123 45"
                        },
                        new
                        {
                            ID = new Guid("b89407ba-c4fd-4354-948b-1838e1b3be77"),
                            CityID = new Guid("8f9cee4e-79f5-46aa-ad01-8d922479f497"),
                            Name = "John Doe",
                            PhoneNumber = "555-123 45"
                        },
                        new
                        {
                            ID = new Guid("d967ea5a-0ab0-4e21-b6a4-9be6f5e921f5"),
                            CityID = new Guid("529b7340-0ded-4d89-ace3-17bf1a275181"),
                            Name = "Marge Simpson",
                            PhoneNumber = "939-555-0113"
                        },
                        new
                        {
                            ID = new Guid("8678839a-dbfe-49ba-bfa3-93e71b5d2945"),
                            CityID = new Guid("3f8b480c-3913-4508-96ad-4967133cb3b7"),
                            Name = "Somna Sculpt",
                            PhoneNumber = "1-555-766728578"
                        },
                        new
                        {
                            ID = new Guid("f918763a-2e4a-45a8-8693-c16a6f343d8d"),
                            CityID = new Guid("7ad71a68-8329-4e80-aae0-2724aa09df11"),
                            Name = "Anthony Hopkins",
                            PhoneNumber = "555-6162"
                        },
                        new
                        {
                            ID = new Guid("6785893f-9f6a-4560-90e9-5928c0543821"),
                            CityID = new Guid("00a0c2df-0487-46a5-ac57-37b2807bf600"),
                            Name = "Saul Goodman",
                            PhoneNumber = "505-842-5662"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebProject.Models.City", b =>
                {
                    b.HasOne("WebProject.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebProject.Models.LanguagePerson", b =>
                {
                    b.HasOne("WebProject.Models.Language", "Language")
                        .WithMany("Speakers")
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProject.Models.Person", "Speaker")
                        .WithMany("Languages")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebProject.Models.Person", b =>
                {
                    b.HasOne("WebProject.Models.City", "City")
                        .WithMany("Citizens")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
